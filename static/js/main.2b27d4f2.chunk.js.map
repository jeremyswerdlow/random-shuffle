{"version":3,"sources":["Constants/Constants.tsx","Display/DisplayInput.tsx","Display/DisplayOutput.tsx","Display/Footer.tsx","Display/Header.tsx","Display/Snackbars.tsx","App.tsx","index.tsx"],"names":["strings","header","title","summary","input","output","footer","codeUrl","siteUrl","text","emptyStringArr","DisplayInput","props","useState","inputRef","setInputRef","open","setOpen","Typography","gutterBottom","variant","message","handleClose","onChange","event","files","target","Promise","resolve","_","reader","FileReader","onload","setInput","result","toString","split","readAsText","then","value","ref","undefined","style","display","type","ButtonGroup","color","fullWidth","marginBottom","Button","onClick","click","startIcon","handleShuffle","TextField","multiline","e","width","entries","join","DisplayOutput","showSuccess","setShowSuccess","showFailure","setShowFailure","saveResultWithSeparator","sep","reject","outputFile","saveAs","Blob","catch","severity","minHeight","clearList","disabled","StyledBottomDiv","styled","div","FooterLink","Link","href","link","children","Footer","borderTop","borderColor","useTheme","palette","primary","dark","padding","Date","getFullYear","Header","FileSnackbar","theme","Snackbar","autoHideDuration","onClose","Alert","elevation","backgroundColor","contrastText","darkTheme","createMuiTheme","main","App","setEntries","shuffled","setShuffled","ThemeProvider","CssBaseline","Grid","container","spacing","item","xs","sm","toShuffle","filter","entry","idx","length","rIdx","Math","floor","random","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b27d4f2.chunk.js","sourcesContent":["export const strings = {\n  header: {\n    title: \"List Shuffler\",\n    summary: \"This is a simple application for returning a shuffled list of inputs. It \"\n    + \"can be useful when trying to decide an order for a group to do something, or if \"\n    + \"you can't decide where to go to eat. It also allows for uploading and \"\n    + \"downloading the inputs and outputs of the shuffler. Inputs should be comma or \"\n    + \"new-line separated (by pressing enter), and will automatically format to new-\"\n    + \"line on commas.\"\n  },\n  input: {\n    header: \"Input\",\n  },\n  output: {\n    header: \"Output\",\n  },\n  footer: {\n    codeUrl: \"https://github.com/jeremyswerdlow/random-shuffle\",\n    siteUrl: \"https://jeremyswerdlow.github.io/about\",\n    text: \"Jeremy Swerdlow\"\n  }\n}\n\nexport const emptyStringArr: string[] = [];","import React, { ChangeEvent, FC, useState } from \"react\";\nimport { Button, ButtonGroup, TextField, Typography } from \"@material-ui/core\";\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\nimport PublishRoundedIcon from '@material-ui/icons/PublishRounded';\nimport ShuffleRoundedIcon from '@material-ui/icons/ShuffleRounded';\nimport { emptyStringArr } from \"../Constants\";\nimport { FileSnackbar } from \".\";\n\ntype DisplayInputProps = {\n  entries: string[],\n  strings: { header: string },\n  handleShuffle: () => void,\n  setInput: ( entries: string[] ) => void,\n};\n\nexport const DisplayInput: FC<DisplayInputProps> = (props) => {\n  const [ inputRef, setInputRef ] = useState<HTMLInputElement>();\n  const [ open, setOpen ] = useState(false);\n\n  const handleUpload = (event: ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files && files[0]) {\n      new Promise((resolve, _) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          props.setInput(event.target?.result?.toString().split(/[\\n,]/) || emptyStringArr);\n          resolve();\n        }\n        reader.readAsText(files[0]);\n      }).then(() => setOpen(true));\n    }\n\n    // reset value in case they select same file to upload again\n    event.target.value = \"\";\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleClear = () => {\n    props.setInput(emptyStringArr)\n  };\n\n  return (\n    <>\n      <Typography gutterBottom variant=\"h4\" >\n        {props.strings.header}\n      </Typography>\n      <FileSnackbar message=\"Upload Successful\" open={open} handleClose={handleClose}/>\n      <div>\n\n        {/* Managing the input */}\n        <input\n          onChange={handleUpload}\n          ref={ (ref) => setInputRef(ref || undefined) }\n          style={{ display: 'none' }}\n          type=\"file\"\n        />\n        <ButtonGroup color=\"primary\" fullWidth style={{marginBottom: \"10px\"}} variant=\"outlined\">\n          <Button onClick={() => inputRef!.click()} startIcon={ <PublishRoundedIcon/> } >Upload</Button>\n          <Button onClick={props.handleShuffle} startIcon={ <ShuffleRoundedIcon/> } >Shuffle</Button>\n          <Button onClick={handleClear} startIcon={ <CloseRoundedIcon /> } >Clear</Button>\n        </ButtonGroup>\n\n        {/* Actual Input */}\n        <TextField\n          color=\"primary\"\n          multiline\n          onChange={ (e) => {props.setInput(e.target.value.split(/[\\n,]/))} }\n          style={{width: \"100%\"}}\n          value={props.entries.join(\"\\n\")}\n          variant=\"outlined\"\n        />\n      </div>\n    </>\n  );\n}","import React, { FC, useState } from \"react\";\nimport { saveAs } from 'file-saver';\nimport { Button, ButtonGroup, TextField, Typography } from \"@material-ui/core\";\nimport ClearAllRoundedIcon from '@material-ui/icons/ClearAllRounded';\nimport GetAppRoundedIcon from '@material-ui/icons/GetAppRounded';\nimport { FileSnackbar } from \".\";\n\ntype DisplayOutputProps = {\n  entries: string[],\n  strings: {\n    header: string,\n  },\n  clearList: () => void,\n};\n\n\nexport const DisplayOutput: FC<DisplayOutputProps> = (props) => {\n  const [ showSuccess, setShowSuccess ] = useState(false);\n  const [ showFailure, setShowFailure ] = useState(false);\n\n  const saveResultWithSeparator = (sep: \"\\n\" | \",\") => {\n    new Promise((resolve, reject) => {\n      const output = props.entries.join(sep);\n      const outputFile = `shuffled_result${(sep === \",\" ? \".csv\" : \".txt\")}`;\n\n      if (output) {\n        saveAs( new Blob([output], {type: \"text/plain;charset=utf-8\"}), outputFile );\n        resolve();\n      } else {\n        reject();\n      }\n    })\n    .then(() => setShowSuccess(true))\n    .catch(() => setShowFailure(true));\n  };\n\n  const handleClose = () => {\n    setShowSuccess(false);\n    setShowFailure(false);\n  };\n\n  return (\n    <>\n      <FileSnackbar message=\"Download Successful\" open={showSuccess} handleClose={handleClose} />\n      <FileSnackbar message=\"No Result to Download\" open={showFailure} severity=\"warning\" handleClose={handleClose} />\n      <Typography gutterBottom variant=\"h4\" >\n        {props.strings.header}\n      </Typography>\n      <div style={{minHeight: \"102px\"}}>\n\n        {/* Managing the output */}\n        <ButtonGroup color=\"primary\" fullWidth style={{marginBottom: \"10px\"}} variant=\"outlined\">\n          <Button onClick={() => {saveResultWithSeparator(\",\")}} startIcon={ <GetAppRoundedIcon /> }>CSV</Button>\n          <Button onClick={() => {saveResultWithSeparator(\"\\n\")}} startIcon={ <GetAppRoundedIcon /> }>Rows</Button>\n          <Button onClick={props.clearList} startIcon={ <ClearAllRoundedIcon /> }>Clear List</Button>\n        </ButtonGroup>\n\n        {/* Displaying the output */}\n        <TextField\n          color=\"primary\"\n          disabled\n          multiline\n          style={{width: \"100%\"}}\n          value={props.entries.join(\"\\n\")}\n          variant=\"outlined\"\n        />\n      </div>\n    </>\n  );\n};","import React, { FC } from \"react\";\nimport { Link, Typography, useTheme } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\nconst StyledBottomDiv = styled.div`\n  text-align: center;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  background-color: rgba(6, 6, 6, 0.6);\n`;\n\ntype FooterLinkProps = {\n  link: string,\n}\n\nconst FooterLink: FC<FooterLinkProps> = (props) => {\n  return (\n    <Link color=\"inherit\" href={props.link} target=\"_blank\">\n      {props.children}\n    </Link>\n  );\n}\n\ntype FooterProps = {\n  strings: {\n    codeUrl: string,\n    siteUrl: string,\n    text: string,\n  }\n};\n\nexport const Footer: FC<FooterProps> = (props) => {\n  return (\n    <StyledBottomDiv>\n      <div style={{borderTop: \"solid 1px\", borderColor: useTheme().palette.primary.dark}}>\n        <Typography variant=\"body2\" color=\"primary\" style={{padding: \"10px\"}}>\n          {'Copyright © '}\n          <FooterLink link={props.strings.siteUrl}>{props.strings.text}</FooterLink>\n          {' '}{new Date().getFullYear()}{'. See the '}\n          <FooterLink link={props.strings.codeUrl}>{\"source code here.\"}</FooterLink>\n        </Typography>\n      </div>\n    </StyledBottomDiv>\n  );\n}","import React, { FC } from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\ntype HeaderProps = {\n  strings: {\n    title: string,\n    summary: string,\n  },\n};\n\nexport const Header: FC<HeaderProps> = (props) => {\n  return (\n    <>\n      <Typography variant=\"h1\">\n        {props.strings.title}\n      </Typography>\n      <Typography variant=\"body2\" color=\"primary\">\n        {props.strings.summary}\n      </Typography>\n    </>\n  );\n};","import React, { FC } from \"react\";\nimport { Snackbar, useTheme } from \"@material-ui/core\";\nimport Alert from '@material-ui/lab/Alert';\n\ntype DownloadSnackbarProps = {\n  message: string,\n  open: boolean,\n  severity?: \"success\" | \"info\" | \"warning\" | \"error\",\n  handleClose: (event?: React.SyntheticEvent, reason?: string) => void,\n}\n\nexport const FileSnackbar: FC<DownloadSnackbarProps> = (props) => {\n  const theme = useTheme();\n\n  return (\n    <Snackbar\n      autoHideDuration={3000}\n      onClose={props.handleClose}\n      open={props.open}\n      style={{marginBottom: \"35px\"}}>\n      <Alert\n        elevation={4}\n        onClose={props.handleClose}\n        severity={props.severity}\n        style={{backgroundColor: theme.palette.primary.contrastText}}\n        variant=\"outlined\"\n      >\n        {props.message}\n      </Alert>\n    </Snackbar>\n  )\n};\n","import { createMuiTheme, CssBaseline, Grid, ThemeProvider } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { emptyStringArr, strings } from './Constants';\nimport { DisplayInput, DisplayOutput, Footer, Header } from './Display';\nimport \"fontsource-roboto\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: \"#85ff9e\",\n    },\n  },\n});\n\n\nfunction App() {\n  const [entries, setEntries] = useState(emptyStringArr);\n  const [shuffled, setShuffled] = useState(entries);\n\n  const handleShuffle = () => {\n    // Copy the list, eliminating any blank entries\n    const toShuffle = [ ...entries.filter( (entry) => entry !== \"\" ) ];\n\n    // Shuffle the list\n    for ( let idx = toShuffle.length - 1; idx > 0; idx-- ) {\n      const rIdx = Math.floor(Math.random() * (idx + 1));\n      [ toShuffle[idx], toShuffle[rIdx] ] = [ toShuffle[rIdx], toShuffle[idx] ];\n    };\n\n    setShuffled(toShuffle);\n  };\n\n  const setInput = (entries: string[]) => {\n    setEntries(entries);\n  };\n\n  const clearList = () => {\n    setShuffled(emptyStringArr);\n  };\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <Grid container spacing={0}>\n\n        {/* Header for the Project */}\n        <Grid item xs={12} style={{padding: \"25px\"}} >\n          <Header strings={strings.header}/>\n        </Grid>\n\n        {/* Input Section Here */}\n        <Grid item xs={12} sm={6} style={{padding: \"25px\"}} >\n          <DisplayInput\n            entries={entries}\n            handleShuffle={handleShuffle}\n            setInput={setInput}\n            strings={strings.input}\n          />\n        </Grid>\n\n        {/* Output Section Here */}\n        <Grid item xs={12} sm={6} style={{padding: \"25px\"}} >\n          <DisplayOutput\n            clearList={clearList}\n            entries={shuffled}\n            strings={strings.output}\n          />\n        </Grid>\n      </Grid>\n\n      {/* Footer for the Project */}\n      <div style={{padding: \"15px\"}}/>\n      <Footer strings={strings.footer}/>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}